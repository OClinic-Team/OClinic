

    {{!-- <meta content="width=device-width, initial-scale=1" name="viewport" /> --}}

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
    {{!-- <link rel='stylesheet' href='./resource/scss/videocall.scss' type="text/css"> --}}
    {{!-- <script src='/socket.io/socket.io.js'></script> --}}

    
    {{!-- <div class="custom-modal" id='recording-options-modal'>
        <div class="custom-modal-content">
            <div class="row text-center">
                <div class="col-md-6 mb-2">
                    <span class="record-option" id='record-video'>Record video</span>
                </div>
                <div class="col-md-6 mb-2">
                    <span class="record-option" id='record-screen'>Record screen</span>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-md-12 text-center">
                    <button class="btn btn-outline-danger" id='closeModal'>Close</button>
                </div>
            </div>
        </div>
    </div>


    <nav class="navbar fixed-middle bg-info rounded-0 d-print-none">
        <div class="text-white">Video Call</div>

        <div class="pull-right room-comm" >
            <span class="text-white mr-5">
                    UserId: <span id='randomNumber'>{{lcAuthUser.Id}}</span>
            </span>
            <button class="btn btn-sm rounded-0 btn-no-effect" id='create-medical-record' title="create-medical-record">
                    <i class="fa fa-id text-white"></i>
                </button>
            <button class="btn btn-sm rounded-0 btn-no-effect" id='toggle-video' title="Hide Video">
                    <i class="fa fa-video text-white"></i>
                </button>

            <button class="btn btn-sm rounded-0 btn-no-effect" id='toggle-mute' title="Mute">
                    <i class="fa fa-microphone-alt text-white"></i>
                </button>

            <button class="btn btn-sm rounded-0 btn-no-effect" id='share-screen' title="Share screen">
                    <i class="fa fa-desktop text-white"></i>
                </button>

            <button class="btn btn-sm rounded-0 btn-no-effect" id='record' title="Record">
                    <i class="fa fa-dot-circle text-white"></i>
                </button>

            <button class="btn btn-sm text-white pull-right btn-no-effect" id='toggle-chat-pane'>
                    <i class="fa fa-comment"></i> <span class="badge badge-danger very-small font-weight-lighter" id='new-chat-notification' hidden>New</span>
                </button>

            <button class="btn btn-sm rounded-0 btn-no-effect text-white">
                    <a href="/" class="text-white text-decoration-none"><i class="fa fa-sign-out-alt text-white" title="Leave"></i></a>
                </button>
        </div>
    </nav>

    <div class="container-fluid" id='room-create' >
        <div class="row">
            <div class="col-12 h2 mt-5 text-center">Create Room</div>
        </div>

        <div class="row mt-2">
            <div class="col-12 text-center">
                <span class="form-text small text-danger" id='err-msg'></span>
            </div>

            <div class="col-12 col-md-4 offset-md-4 mb-3">
                <label for="room-name">Room Name</label>
                <input type="text" id='room-name' class="form-control rounded-0" placeholder="Room Name">
            </div>

            <div class="col-12 col-md-4 offset-md-4 mb-3">
                <label for="your-name">Your Name</label>
                <input type="text" id='your-name' class="form-control rounded-0" placeholder="Your Name" >
            </div>

            <div class="col-12 col-md-4 offset-md-4 mb-3">
                <button id='create-room' class="btn btn-block rounded-0 btn-info">Create Room</button>
            </div>

            <div class="col-12 col-md-4 offset-md-4 mb-3" id='room-created'></div>
        </div>
    </div>



    <div class="container-fluid" id='username-set' hidden>
        <div class="row">
            <div class="col-12 h4 mt-5 text-center">Your Name</div>
        </div>

        <div class="row mt-2">
            <div class="col-12 text-center">
                <span class="form-text small text-danger" id='err-msg-username'></span>
            </div>

            <div class="col-12 col-md-4 offset-md-4 mb-3">
                <label for="username">Your Name</label>
                <input type="text" id='username' class="form-control rounded-0" placeholder="Your Name">
            </div>

            <div class="col-12 col-md-4 offset-md-4 mb-3">
                <button id='enter-room' class="btn btn-block rounded-0 btn-info">Enter Room</button>
            </div>
        </div>
    </div>



    <div class="container-fluid room-comm" hidden>
        <div class="row">
            <video class="local-video mirror-mode" id='local' volume='0' autoplay muted></video>
        </div>

        <div class="row">
            <div class="col-md-12 main" id='main-section'>
                <div class="row mt-2 mb-2" id='videos'></div>
            </div>

            <div class="col-md-3 chat-col d-print-none mb-2 bg-info" id='chat-pane' hidden>
                <div class="row">
                    <div class="col-12 text-center h2 mb-3">CHAT</div>
                </div>

                <div id='chat-messages'></div>

                <div class="row">
                    <textarea id='chat-input' class="form-control rounded-0 chat-box border-info" rows='3' placeholder="Type here..."></textarea>
                </div>
            </div>
        </div>
    </div> --}}



   <div class="custom-modal" id='recording-options-modal'>
        <div class="custom-modal-content">
            <div class="row text-center">
                <div class="col-md-6 mb-2"><span class="record-option" id='record-video'>Record video</span></div>
                <div class="col-md-6 mb-2"><span class="record-option" id='record-screen'>Record screen</span></div>
            </div>
            <div class="row mt-3">
                <div class="col-md-12 text-center"><button class="btn btn-outline-danger" id='closeModal'>Close</button></div>
            </div>
        </div>
    </div>
    <nav class="navbar fix-middle bg-info rounded-0 d-print-none">
        <div class="text-white">Video Call</div>
        <div class="pull-right room-comm"><span class="text-white mr-5">User Id: <span id='randomNumber'></span></span><button class="btn btn-sm rounded-0 btn-no-effect" id='create-medical-record' title="create-medical-record"><i class="fa fa-id text-white"></i></button>
            <button class="btn btn-sm rounded-0 btn-no-effect" id='toggle-video' title="Hide Video"><i class="fa fa-video text-white"></i></button><button class="btn btn-sm rounded-0 btn-no-effect" id='toggle-mute' title="Mute"><i class="fa fa-microphone-alt text-white"></i></button>
            <button class="btn btn-sm rounded-0 btn-no-effect" id='share-screen' title="Share screen"><i class="fa fa-desktop text-white"></i></button><button class="btn btn-sm rounded-0 btn-no-effect" id='record' title="Record"><i class="fa fa-dot-circle text-white"></i></button>
            <button class="btn btn-sm text-white pull-right btn-no-effect" id='toggle-chat-pane'><i class="fa fa-comment"></i><span class="badge badge-danger very-small font-weight-lighter" id='new-chat-notification' hidden>New</span></button>
            <button class="btn btn-sm rounded-0 btn-no-effect text-white"><a href="/" class="text-white text-decoration-none"><i class="fa fa-sign-out-alt text-white" title="Leave"></i></a></button>
        </div>
    </nav>
    <div class="container-fluid" id='room-create' >
        <div class="row">
            <div class="col-12 h2 mt-5 text-center">Create Room</div>
        </div>
        <div class="row mt-2">
            <div class="col-12 text-center"><span class="form-text small text-danger" id='err-msg'></span></div>
            <div class="col-12 col-md-4 offset-md-4 mb-3"><label for="room-name">Room Name</label><input type="text" id='room-name' class="form-control rounded-0" placeholder="Room Name"></div>
            <div class="col-12 col-md-4 offset-md-4 mb-3"><label for="your-name">Your Name</label><input type="text" id='your-name' class="form-control rounded-0" placeholder="Your Name"></div>
            <div class="col-12 col-md-4 offset-md-4 mb-3"><button id='create-room' class="btn btn-block rounded-0 btn-info">Create Room</button></div>
            <div class="col-12 col-md-4 offset-md-4 mb-3" id='room-created'></div>
        </div>
    </div>
    <div class="container-fluid" id='username-set' hidden>
        <div class="row">
            <div class="col-12 h4 mt-5 text-center">Your Name</div>
        </div>
        <div class="row mt-2">
            <div class="col-12 text-center"><span class="form-text small text-danger" id='err-msg-username'></span></div>
            <div class="col-12 col-md-4 offset-md-4 mb-3"><label for="username">Your Name</label><input type="text" id='username' class="form-control rounded-0" placeholder="Your Name"></div>
            <div class="col-12 col-md-4 offset-md-4 mb-3"><button id='enter-room' class="btn btn-block rounded-0 btn-info">Enter Room</button></div>
        </div>
    </div>
    <div class="container-fluid room-comm" hidden>
        <div class="row"><video class="local-video mirror-mode" id='local' volume='0' autoplay muted></video></div>
        <div class="row">
            <div class="col-md-12 main" id='main-section'>
                <div class="row mt-2 mb-2" id='videos'></div>
            </div>
            <div class="col-md-3 chat-col d-print-none mb-2 bg-info" id='chat-pane' hidden>
                <div class="row">
                    <div class="col-12 text-center h2 mb-3">CHAT</div>
                </div>
                <div id='chat-messages'></div>
                <div class="row"><textarea id='chat-input' class="form-control rounded-0 chat-box border-info" rows='3' placeholder="Type here..."></textarea></div>
            </div>
        </div>
    </div>



<script type="module" type="text/javascript" >
    import * as helpers from './roomVideoCall/helpers.js'; 
    window.addEventListener('load'() => {
         //When the chat icon is clicked
    document.querySelector('#toggle-chat-pane').addEventListener('click', (e) => {
        let chatElem = document.querySelector('#chat-pane');
        let mainSecElem = document.querySelector('#main-section');

        if (chatElem.classList.contains('chat-opened')) {
            chatElem.setAttribute('hidden', true);
            mainSecElem.classList.remove('col-md-9');
            mainSecElem.classList.add('col-md-12');
            chatElem.classList.remove('chat-opened');
        } else {
            chatElem.attributes.removeNamedItem('hidden');
            mainSecElem.classList.remove('col-md-12');
            mainSecElem.classList.add('col-md-9');
            chatElem.classList.add('chat-opened');
        }

        //remove the 'New' badge on chat icon (if any) once chat is opened.
        setTimeout(() => {
            if (document.querySelector('#chat-pane').classList.contains('chat-opened')) {
                helpers.toggleChatNotificationBadge();
            }
        }, 300);
    });


    //When the video frame is clicked. This will enable picture-in-picture
    document.getElementById('local').addEventListener('click', () => {
        if (!document.pictureInPictureElement) {
            document.getElementById('local').requestPictureInPicture()
                .catch(error => {
                    // Video failed to enter Picture-in-Picture mode.
                    console.error(error);
                });
        } else {
            document.exitPictureInPicture()
                .catch(error => {
                    // Video failed to leave Picture-in-Picture mode.
                    console.error(error);
                });
        }
    });


    //When the 'Create room" is button is clicked
    document.getElementById('create-room').addEventListener('click', (e) => {
        e.preventDefault();
       
        let roomName = document.querySelector('#room-name').value;
        let yourName = document.querySelector('#your-name').value;
         console.log(roomName);
        if (roomName && yourName) {
            //remove error message, if any
            document.querySelector('#err-msg').innerText = "";

            //save the user's name in sessionStorage
            sessionStorage.setItem('username', yourName);

            //create room link
            let roomLink = `${ location.origin }/room?room=${ roomName.trim().replace( ' ', '_' ) }_${ helpers.generateRandomString() }`;

            //show message with link to room
            document.querySelector('#room-created').innerHTML = `Room successfully created. Click <a href='${ roomLink }'>here</a> to enter room. 
                Share the room link with your partners.`;

            //empty the values
            document.querySelector('#room-name').value = '';
            document.querySelector('#your-name').value = '';
        } else {
            document.querySelector('#err-msg').innerText = "All fields are required";
        }
    });


    //When the 'Enter room' button is clicked.
    document.getElementById('enter-room').addEventListener('click', (e) => {
        e.preventDefault();

        let name = document.querySelector('#username').value;

        if (name) {
            //remove error message, if any
            document.querySelector('#err-msg-username').innerText = "";

            //save the user's name in sessionStorage
            sessionStorage.setItem('username', name);

            //reload room
            location.reload();
        } else {
            document.querySelector('#err-msg-username').innerText = "Please input your name";
        }
    });


    document.addEventListener('click', (e) => {
        if (e.target && e.target.classList.contains('expand-remote-video')) {
            helpers.maximiseStream(e);
        } else if (e.target && e.target.classList.contains('mute-remote-mic')) {
            helpers.singleStreamToggleMute(e);
        }
    });


    document.getElementById('closeModal').addEventListener('click', () => {
        console.log('abc')
        helpers.toggleModal('recording-options-modal', false);
    });
})
</script>
<script type="module" type="text/javascript">

    import * as h from './roomVideoCall/helpers.js';
    window.addEventListener('load', () => {
    const room = h.getQString(location.href, 'room');
    const username = sessionStorage.getItem('username');

    if (!room) {
        document.querySelector('#room-create').attributes.removeNamedItem('hidden');
    } else if (!username) {
        document.querySelector('#username-set').attributes.removeNamedItem('hidden');
    } else {
        let commElem = document.getElementsByClassName('room-comm');

        for (let i = 0; i < commElem.length; i++) {
            commElem[i].attributes.removeNamedItem('hidden');
        }

        var pc = [];

        let socket = io('/stream');

        var socketId = '';
        {{!-- var randomNumber = `__${h.generateRandomString()}__${h.generateRandomString()}__`; --}}
        var myStream = '';
        var screen = '';
        var recordedStream = [];
        var mediaRecorder = '';
        var randomNumber ={{lcAuthUser.Id}}

        //Get user video by default
        getAndSetUserStream();


        socket.on('connect', () => {
            //set socketId
            socketId = socket.io.engine.id;
            document.getElementById('randomNumber').innerText = randomNumber;


            socket.emit('subscribe', {
                room: room,
                socketId: socketId
            });


            socket.on('new user', (data) => {
                socket.emit('newUserStart', { to: data.socketId, sender: socketId });
                pc.push(data.socketId);
                init(true, data.socketId);
            });


            socket.on('newUserStart', (data) => {
                pc.push(data.sender);
                init(false, data.sender);
            });


            socket.on('ice candidates', async(data) => {
                data.candidate ? await pc[data.sender].addIceCandidate(new RTCIceCandidate(data.candidate)) : '';
            });


            socket.on('sdp', async(data) => {
                if (data.description.type === 'offer') {
                    data.description ? await pc[data.sender].setRemoteDescription(new RTCSessionDescription(data.description)) : '';

                    h.getUserFullMedia().then(async(stream) => {
                        if (!document.getElementById('local').srcObject) {
                            h.setLocalStream(stream);
                        }

                        //save my stream
                        myStream = stream;

                        stream.getTracks().forEach((track) => {
                            pc[data.sender].addTrack(track, stream);
                        });

                        let answer = await pc[data.sender].createAnswer();

                        await pc[data.sender].setLocalDescription(answer);

                        socket.emit('sdp', { description: pc[data.sender].localDescription, to: data.sender, sender: socketId });
                    }).catch((e) => {
                        console.error(e);
                    });
                } else if (data.description.type === 'answer') {
                    await pc[data.sender].setRemoteDescription(new RTCSessionDescription(data.description));
                }
            });


            socket.on('chat', (data) => {
                h.addChat(data, 'remote');
            });
        });


        function getAndSetUserStream() {
            h.getUserFullMedia().then((stream) => {
                //save my stream
                myStream = stream;

                h.setLocalStream(stream);
            }).catch((e) => {
                console.error(`stream error: ${ e }`);
            });
        }


        function sendMsg(msg) {
            let data = {
                room: room,
                msg: msg,
                sender: `${username} (${lcAuthUser.Id})`
            };

            //emit chat message
            socket.emit('chat', data);

            //add localchat
            h.addChat(data, 'local');
        }



        function init(createOffer, partnerName) {
            pc[partnerName] = new RTCPeerConnection(h.getIceServer());

            if (screen && screen.getTracks().length) {
                screen.getTracks().forEach((track) => {
                    pc[partnerName].addTrack(track, screen); //should trigger negotiationneeded event
                });
            } else if (myStream) {
                myStream.getTracks().forEach((track) => {
                    pc[partnerName].addTrack(track, myStream); //should trigger negotiationneeded event
                });
            } else {
                h.getUserFullMedia().then((stream) => {
                    //save my stream
                    myStream = stream;

                    stream.getTracks().forEach((track) => {
                        pc[partnerName].addTrack(track, stream); //should trigger negotiationneeded event
                    });

                    h.setLocalStream(stream);
                }).catch((e) => {
                    console.error(`stream error: ${ e }`);
                });
            }



            //create offer
            if (createOffer) {
                pc[partnerName].onnegotiationneeded = async() => {
                    let offer = await pc[partnerName].createOffer();

                    await pc[partnerName].setLocalDescription(offer);

                    socket.emit('sdp', { description: pc[partnerName].localDescription, to: partnerName, sender: socketId });
                };
            }



            //send ice candidate to partnerNames
            pc[partnerName].onicecandidate = ({ candidate }) => {
                socket.emit('ice candidates', { candidate: candidate, to: partnerName, sender: socketId });
            };



            //add
            pc[partnerName].ontrack = (e) => {
                let str = e.streams[0];
                if (document.getElementById(`${ partnerName }-video`)) {
                    document.getElementById(`${ partnerName }-video`).srcObject = str;
                } else {
                    //video elem
                    let newVid = document.createElement('video');
                    newVid.id = `${ partnerName }-video`;
                    newVid.srcObject = str;
                    newVid.autoplay = true;
                    newVid.className = 'remote-video';

                    //video controls elements
                    let controlDiv = document.createElement('div');
                    controlDiv.className = 'remote-video-controls';
                    controlDiv.innerHTML = `<i class="fa fa-microphone text-white pr-3 mute-remote-mic" title="Mute"></i>
                        <i class="fa fa-expand text-white expand-remote-video" title="Expand"></i>`;

                    //create a new div for card
                    let cardDiv = document.createElement('div');
                    cardDiv.className = 'card card-sm';
                    cardDiv.id = partnerName;
                    cardDiv.appendChild(newVid);
                    cardDiv.appendChild(controlDiv);

                    //put div in main-section elem
                    document.getElementById('videos').appendChild(cardDiv);

                    h.adjustVideoElemSize();
                }
            };



            pc[partnerName].onconnectionstatechange = (d) => {
                switch (pc[partnerName].iceConnectionState) {
                    case 'disconnected':
                    case 'failed':
                        h.closeVideo(partnerName);
                        break;

                    case 'closed':
                        h.closeVideo(partnerName);
                        break;
                }
            };



            pc[partnerName].onsignalingstatechange = (d) => {
                switch (pc[partnerName].signalingState) {
                    case 'closed':
                        console.log("Signalling state is 'closed'");
                        h.closeVideo(partnerName);
                        break;
                }
            };
        }



        function shareScreen() {
            h.shareScreen().then((stream) => {
                h.toggleShareIcons(true);

                //disable the video toggle btns while sharing screen. This is to ensure clicking on the btn does not interfere with the screen sharing
                //It will be enabled was user stopped sharing screen
                h.toggleVideoBtnDisabled(true);

                //save my screen stream
                screen = stream;

                //share the new stream with all partners
                broadcastNewTracks(stream, 'video', false);

                //When the stop sharing button shown by the browser is clicked
                screen.getVideoTracks()[0].addEventListener('ended', () => {
                    stopSharingScreen();
                });
            }).catch((e) => {
                console.error(e);
            });
        }



        function stopSharingScreen() {
            //enable video toggle btn
            h.toggleVideoBtnDisabled(false);

            return new Promise((res, rej) => {
                screen.getTracks().length ? screen.getTracks().forEach(track => track.stop()) : '';

                res();
            }).then(() => {
                h.toggleShareIcons(false);
                broadcastNewTracks(myStream, 'video');
            }).catch((e) => {
                console.error(e);
            });
        }



        function broadcastNewTracks(stream, type, mirrorMode = true) {
            h.setLocalStream(stream, mirrorMode);

            let track = type == 'audio' ? stream.getAudioTracks()[0] : stream.getVideoTracks()[0];

            for (let p in pc) {
                let pName = pc[p];

                if (typeof pc[pName] == 'object') {
                    h.replaceTrack(track, pc[pName]);
                }
            }
        }


        function toggleRecordingIcons(isRecording) {
            let e = document.getElementById('record');

            if (isRecording) {
                e.setAttribute('title', 'Stop recording');
                e.children[0].classList.add('text-danger');
                e.children[0].classList.remove('text-white');
            } else {
                e.setAttribute('title', 'Record');
                e.children[0].classList.add('text-white');
                e.children[0].classList.remove('text-danger');
            }
        }


        function startRecording(stream) {
            mediaRecorder = new MediaRecorder(stream, {
                mimeType: 'video/webm;codecs=vp9'
            });

            mediaRecorder.start(1000);
            toggleRecordingIcons(true);

            mediaRecorder.ondataavailable = function(e) {
                recordedStream.push(e.data);
            };

            mediaRecorder.onstop = function() {
                toggleRecordingIcons(false);

                h.saveRecordedStream(recordedStream, username);

                setTimeout(() => {
                    recordedStream = [];
                }, 3000);
            };

            mediaRecorder.onerror = function(e) {
                console.error(e);
            };
        }


        //Chat textarea
        document.getElementById('chat-input').addEventListener('keypress', (e) => {
            if (e.which === 13 && (e.target.value.trim())) {
                e.preventDefault();

                sendMsg(e.target.value);

                setTimeout(() => {
                    e.target.value = '';
                }, 50);
            }
        });


        //When the video icon is clicked
        document.getElementById('toggle-video').addEventListener('click', (e) => {
            e.preventDefault();

            let elem = document.getElementById('toggle-video');

            if (myStream.getVideoTracks()[0].enabled) {
                e.target.classList.remove('fa-video');
                e.target.classList.add('fa-video-slash');
                elem.setAttribute('title', 'Show Video');

                myStream.getVideoTracks()[0].enabled = false;
            } else {
                e.target.classList.remove('fa-video-slash');
                e.target.classList.add('fa-video');
                elem.setAttribute('title', 'Hide Video');

                myStream.getVideoTracks()[0].enabled = true;
            }

            broadcastNewTracks(myStream, 'video');
        });


        //When the mute icon is clicked
        document.getElementById('toggle-mute').addEventListener('click', (e) => {
            e.preventDefault();

            let elem = document.getElementById('toggle-mute');

            if (myStream.getAudioTracks()[0].enabled) {
                e.target.classList.remove('fa-microphone-alt');
                e.target.classList.add('fa-microphone-alt-slash');
                elem.setAttribute('title', 'Unmute');

                myStream.getAudioTracks()[0].enabled = false;
            } else {
                e.target.classList.remove('fa-microphone-alt-slash');
                e.target.classList.add('fa-microphone-alt');
                elem.setAttribute('title', 'Mute');

                myStream.getAudioTracks()[0].enabled = true;
            }

            broadcastNewTracks(myStream, 'audio');
        });


        //When user clicks the 'Share screen' button
        document.getElementById('share-screen').addEventListener('click', (e) => {
            e.preventDefault();

            if (screen && screen.getVideoTracks().length && screen.getVideoTracks()[0].readyState != 'ended') {
                stopSharingScreen();
            } else {
                shareScreen();
            }
        });


        //When record button is clicked
        document.getElementById('record').addEventListener('click', (e) => {
            /**
             * Ask user what they want to record.
             * Get the stream based on selection and start recording
             */
            if (!mediaRecorder || mediaRecorder.state == 'inactive') {
                h.toggleModal('recording-options-modal', true);
            } else if (mediaRecorder.state == 'paused') {
                mediaRecorder.resume();
            } else if (mediaRecorder.state == 'recording') {
                mediaRecorder.stop();
            }
        });


        //When user choose to record screen
        document.getElementById('record-screen').addEventListener('click', () => {
            h.toggleModal('recording-options-modal', false);

            if (screen && screen.getVideoTracks().length) {
                startRecording(screen);
            } else {
                h.shareScreen().then((screenStream) => {
                    startRecording(screenStream);
                }).catch(() => {});
            }
        });


        //When user choose to record own video
        document.getElementById('record-video').addEventListener('click', () => {
            h.toggleModal('recording-options-modal', false);

            if (myStream && myStream.getTracks().length) {
                startRecording(myStream);
            } else {
                h.getUserFullMedia().then((videoStream) => {
                    startRecording(videoStream);
                }).catch(() => {});
            }
        });
    }
})
</script>
{{!-- {{#sections 'roomChat'}}
    <script type="module" src='./roomVideoCall/rtc.js'type="text/javascript"></script>
    <script type="module" src='./roomVideoCall/events.js' type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/webrtc-adapter/7.3.0/adapter.min.js" integrity="sha256-2qQheewaqnZlXJ3RJRghVUwD/3fD9HNqxh4C+zvgmF4=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js'></script>
    <script src='https://cdn.rawgit.com/yahoo/xss-filters/master/dist/xss-filters.js'></script>
    <script type="module" src='./roomVideoCall/autolink.js' type="text/javascript"></script>
    {{/sections}} --}}