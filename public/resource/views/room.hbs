
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="img/favicon.ico" type="image/x-icon">
    <title>Room Chat</title>
	<link rel="stylesheet" href="/css/app.css">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/js/all.min.js" integrity="sha256-KzZiKy0DWYsnwMF+X1DvQngQ2/FxF7MF3Ff72XcpuPs=" crossorigin="anonymous"></script>      
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js" integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV" crossorigin="anonymous"></script>
    <script>
		const ROOM_ID = `{{roomId}}`;
		//const user = `{{userName}}`;
		//sessionStorage.setItem('nameUser',userName)
    	//sessionStorage.setItem('userId', req.session.authUser.Id)
	</script>
	
  <div class="main">
    <div class="mainLeft">
      <div class="mainVideos">
        <div id="videoGrid"> </div>
      </div>
      <div class="mainControls">
        <div class="mainControlsBlock">
          <div onclick="muteUnmute()" class="mainControlsButton mainMuteButton">
            <i class="fas fa-microphone"></i>
            <span>Mute</span>
          </div>
          <div onclick="playStop()" class="mainControlsButton mainVideoButton">
            <i class="fas fa-video"></i>
            <span>Stop Video</span>
          </div>
        </div>
		<div>
		
		</div>
        <div class="mainControlsBlock">
          <div class="mainControlsButton">
            <i class="fas fa-shield-alt"></i>
            <span>Security</span>
         </div>
         <div class="mainControlsButton">
            <i class="fas fa-user-friends"></i>
            <span>Participants</span>
         </div>
         <div class="mainControlsButton">
            <i class="fas fa-comment-alt"></i>
            <span>Chat </span>
         </div>
         <div class="mainControlsButton">
          <i class="fas fa-record-vinyl"></i>         
          <span>Record</span>
       </div>
        </div>

        <div class="mainControlsBlock">
          <div class="mainControlsButtonEndMeeting">
             <span id="leave-btn" class="leaveMeeting">End</span>
          </div>
       </div>

      </div>

    </div>
    <div class="mainRight">
      <div class="mainHeader">
        <h6>Chat</h6>
      </div>
      <div class="mainChatWindow">
        <ul class="messagesContainer">
        </ul>
     </div>
     <div class="messageSendingTo">To: <span>Everyone <i class="fas fa-angle-down"></i></span> </div>
     <div class="mainMessageContainer">
       <input id="chatMessage" type="text" placeholder="Type message here...">
     </div>
    </div>
</div>
<script>
const socket = io.connect();
const videoGrid = document.getElementById('videoGrid')
const myVideo = document.createElement('video')

var peer = new Peer()

const myPeer = new Peer(undefined, {
	path: '/peerjs',
	host: '/',
	port: '3000',
})

const peers = {}
let myVideoStream
navigator.mediaDevices
	.getUserMedia({
		video: true,
		audio: true,
	})
	.then((stream) => {
		myVideoStream = stream
		addVideoStream(myVideoStream, stream)

	
		socket.on('user-connected',function(userId) {
			connectToNewUser(userId, stream)
			alert('Có người tham gia phòng họp',userId);
		})

		peer.on('call', (call) => {
			call.answer(stream)
			const video = document.createElement('video')
			call.on('stream', (userVideoStream) => {
				addVideoStream(video, userVideoStream)
			})
		})

		let text = $('input')

		$('html').keydown(function (e) {
			if (e.which == 13 && text.val().length !== 0) {
				socket.emit('message', text.val())
				text.val('')
			}
		})
		// sent message in box chat
		socket.on('createMessage', (message,userId) => {
			$('ul').append(`<li >
								<span class="messageHeader">
									<span>
										From 
										<span class="messageSender">SomeOne</span> 
										to 
										<span class="messageReceiver">Everyone:</span>
									</span>
									${new Date().toLocaleString('en-US', {
										hour: 'numeric',
										minute: 'numeric',
										hour12: true,
									})}
								</span>

								<span class="message">${message}</span>
							
							</li>`)
			scrollToBottom()
		})
	})

socket.on('user-disconnected', (userId) => {
	if (peers[userId]) peers[userId].close();

})

peer.on('open', id => {
	socket.emit('join-room', ROOM_ID, id)
})

const connectToNewUser = (userId,stream) => {
	const call = peer.call(userId,stream)
	const video = document.createElement('video')
	call.on('stream', (userVideoStream) => {
		addVideoStream(video, userVideoStream)
	})
	call.on('close', () => {
		video.remove()
	})

	peers[userId] = call
}

const addVideoStream = (video, stream) => {
	video.srcObject = stream;
	video.addEventListener('loadedmetadata', () => {
		video.play();
	})
	videoGrid.append(video)
}

const scrollToBottom = () => {
	var d = $('.mainChatWindow')
	d.scrollTop(d.prop('scrollHeight'))
}

const muteUnmute = () => {
	const enabled = myVideoStream.getAudioTracks()[0].enabled
	if (enabled) {
		myVideoStream.getAudioTracks()[0].enabled = false
		setUnmuteButton()
	} else {
		setMuteButton()
		myVideoStream.getAudioTracks()[0].enabled = true
	}
}

const setMuteButton = () => {
	const html = `
	  <i class="fas fa-microphone"></i>
	  <span>Mute</span>
	`
	document.querySelector('.mainMuteButton').innerHTML = html
}

const setUnmuteButton = () => {
	const html = `
	  <i class="unmute fas fa-microphone-slash"></i>
	  <span>Unmute</span>
	`
	document.querySelector('.mainMuteButton').innerHTML = html
}

const playStop = () => {
	console.log('object')
	let enabled = myVideoStream.getVideoTracks()[0].enabled
	if (enabled) {
		myVideoStream.getVideoTracks()[0].enabled = false
		setPlayVideo()
	} else {
		setStopVideo()
		myVideoStream.getVideoTracks()[0].enabled = true
	}
}

const setStopVideo = () => {
	const html = `
	  <i class="fas fa-video"></i>
	  <span>Stop Video</span>
	`
	document.querySelector('.mainVideoButton').innerHTML = html
}

const setPlayVideo = () => {
	const html = `
	<i class="stop fas fa-video-slash"></i>
	  <span>Play Video</span>
	`
	document.querySelector('.mainVideoButton').innerHTML = html
}

//button end
document.getElementById('leave-btn').addEventListener('click', () => {
  const leaveRoom = confirm('Bạn có muốn rời phòng họp ?');
  if (leaveRoom) {
    window.location = '/';
  } else {
  }
});
</script>