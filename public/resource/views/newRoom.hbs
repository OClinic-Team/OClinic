<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
    integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css"
    integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
<link rel="stylesheet" href="/css/newVideoCall.css">

<title>Multi-User Video Call</title>

<meta content="width=device-width, initial-scale=1" name="viewport" />

<script src="https://cdnjs.cloudflare.com/ajax/libs/webrtc-adapter/7.3.0/adapter.min.js"
    integrity="sha256-2qQheewaqnZlXJ3RJRghVUwD/3fD9HNqxh4C+zvgmF4=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js'></script>
<script src='https://cdn.rawgit.com/yahoo/xss-filters/master/dist/xss-filters.js'></script>

<script src='/socket.io/socket.io.js'></script>

{{!-- ____________________________________________________________________________________________________ --}}
<div class="body">
    <div class="modal" tabindex="-1" role="dialog" id='recording-options-modal'>
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Record Screen</h5>
                </div>
                <div class="modal-body">
                    <p>Hãy chọn phương thức record!</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal" id='closeModal'>Close</button>
                    <button type="button" class="btn btn-primary" id='record-video'>Record video</button>
                    <button type="button" class="btn btn-success" id='record-screen'>Record screen</button>
                </div>
            </div>
        </div>
    </div>
    <nav class="navbar navbar-dark bg-dark py-2">
        <a class="navbar-brand" href='/'>Online<span>Clinic.</span></a>

        <div class="pull-right room-comm" hidden>
            <span class="text-white mr-5">
                ID: <span id='randomNumber'></span>
            </span>

            <button class="btn btn-sm rounded-0 btn-no-effect" id='toggle-video' title="Hide Video">
                <i class="fa fa-video text-white"></i>
            </button>

            <button class="btn btn-sm rounded-0 btn-no-effect" id='toggle-mute' title="Mute">
                <i class="fa fa-microphone-alt text-white"></i>
            </button>

            <button class="btn btn-sm rounded-0 btn-no-effect" id='share-screen' title="Share screen">
                <i class="fa fa-desktop text-white"></i>
            </button>

            <button class="btn btn-sm rounded-0 btn-no-effect" id='record' title="Record">
                <i class="fa fa-dot-circle text-white"></i>
            </button>

            <button class="btn btn-sm text-white pull-right btn-no-effect" id='toggle-chat-pane'>
                <i class="fa fa-comment"></i> <span class="badge badge-danger very-small font-weight-lighter"
                    id='new-chat-notification' hidden>New</span>
            </button>

            <button class="btn btn-sm rounded-0 btn-no-effect text-white">
                <a href="/" class="text-white text-decoration-none"><i class="fa fa-sign-out-alt text-white"
                        title="Leave"></i></a>
            </button>
        </div>
    </nav>

    <div class="container-fluid" id='room-create' hidden>
        <div class="row">
            <div class="col-12 h2 mt-5 text-center">Create Room</div>
        </div>

        <div class="row mt-2">
            <div class="col-12 text-center">
                <span class="form-text small text-danger" id='err-msg'></span>
            </div>

            <div class="col-12 col-md-4 offset-md-4 mb-3">
                <label for="room-name">Room Name</label>
                <input type="text" id='room-name' class="form-control rounded-0" placeholder="Room Name">
            </div>

            <div class="col-12 col-md-4 offset-md-4 mb-3">
                <label for="your-name">Your Name</label>
                <input type="text" id='your-name' class="form-control rounded-0" placeholder="Your Name">
            </div>

            <div class="col-12 col-md-4 offset-md-4 mb-3">
                <button id='create-room' class="btn btn-block rounded-0 btn-info">Create Room</button>
            </div>

            <div class="col-12 col-md-4 offset-md-4 mb-3" id='room-created'></div>
        </div>
    </div>



    <div class="container-fluid" id='username-set' hidden>
        <div class="row">
            <div class="col-12 h4 mt-5 text-center">Your Name</div>
        </div>

        <div class="row mt-2">
            <div class="col-12 text-center">
                <span class="form-text small text-danger" id='err-msg-username'></span>
            </div>

            <div class="col-12 col-md-4 offset-md-4 mb-3">
                <label for="username">Your Name</label>
                <input type="text" id='username' class="form-control rounded-0" placeholder="Your Name">
            </div>

            <div class="col-12 col-md-4 offset-md-4 mb-3">
                <button id='enter-room' class="btn btn-block rounded-0 btn-info">Enter Room</button>
            </div>
        </div>
    </div>



    <div class="container-fluid room-comm" hidden>
        <div class="row ">
            <video class="local-video mirror-mode" id='local' volume='0' autoplay muted></video>
        </div>

        <div class="row">
            {{!-- video lyout --}}
            <div class="col-md-12 main " id='main-section'>
                <div class="row d-flex justify-content-start" id='videos'></div>
            </div>
            {{!-- chat layout --}}
            <div class="col-md-3 chat-col mb-2 mt-3 bg-dark" id='chat-pane' hidden>
                <div class="row">
                    <div class="col-12 text-center h2 mb-3">OClinic CHAT</div>
                </div>

                <div id='chat-messages'></div>

                <div class="row">
                    <textarea id='chat-input' class="form-control rounded-0 chat-box border-info" rows='3'
                        placeholder="Type here..."></textarea>
                </div>
            </div>
        </div>
    </div>
</div>

{{!-- _____________________________________________________________________________________________________________
--}}
{{!-- helper.js --}}
<script>
    function generateRandomString() {
        const crypto = window.crypto || window.msCrypto;
        let array = new Uint32Array(1);

        return crypto.getRandomValues(array);
    }


    function closeVideo(elemId) {
        if (document.getElementById(elemId)) {
            document.getElementById(elemId).remove();
            this.adjustVideoElemSize();
        }
    }


    function pageHasFocus() {
        return !(document.hidden || document.onfocusout || window.onpagehide || window.onblur);
    }



    function getQString(url = '', keyToReturn = '') {
        url = url ? url : location.href;
        let queryStrings = decodeURIComponent(url).split('#', 2)[0].split('?', 2)[1];

        if (queryStrings) {
            let splittedQStrings = queryStrings.split('&');

            if (splittedQStrings.length) {
                let queryStringObj = {};

                splittedQStrings.forEach(function (keyValuePair) {
                    let keyValue = keyValuePair.split('=', 2);

                    if (keyValue.length) {
                        queryStringObj[keyValue[0]] = keyValue[1];
                    }
                });

                return keyToReturn ? (queryStringObj[keyToReturn] ? queryStringObj[keyToReturn] : null) : queryStringObj;
            }

            return null;
        }

        return null;
    }


    function userMediaAvailable() {
        return !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
    }


    function getUserFullMedia() {
        if (this.userMediaAvailable()) {
            return navigator.mediaDevices.getUserMedia({
                video: true,
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true
                }
            });
        }

        else {
            throw new Error('User media not available');
        }
    }


    function getUserAudio() {
        if (this.userMediaAvailable()) {
            return navigator.mediaDevices.getUserMedia({
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true
                }
            });
        }

        else {
            throw new Error('User media not available');
        }
    }



    function handleShareScreen() {
        if (this.userMediaAvailable()) {
            return navigator.mediaDevices.getDisplayMedia({
                video: {
                    cursor: "always"
                },
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    sampleRate: 44100
                }
            });
        }

        else {
            throw new Error('User media not available');
        }
    }


    function getIceServer() {
        return {
            iceServers: [
                {
                    urls: ["stun:eu-turn4.xirsys.com"]
                },
                {
                    username: "ml0jh0qMKZKd9P_9C0UIBY2G0nSQMCFBUXGlk6IXDJf8G2uiCymg9WwbEJTMwVeiAAAAAF2__hNSaW5vbGVl",
                    credential: "4dd454a6-feee-11e9-b185-6adcafebbb45",
                    urls: [
                        "turn:eu-turn4.xirsys.com:80?transport=udp",
                        "turn:eu-turn4.xirsys.com:3478?transport=tcp"
                    ]
                }
            ]
        };
    }

    //chat cua ban
    function addChat(data, senderType) {
        let chatMsgDiv = document.querySelector('#chat-messages');
        let contentAlign = 'justify-content-end';
        let senderName = 'You';
        let msgBg = 'bg-light';

        if (senderType === 'remote') {
            contentAlign = 'justify-content-start';
            senderName = data.sender;
            msgBg = '';
            this.toggleChatNotificationBadge();
        }

        let infoDiv = document.createElement('div');
        infoDiv.className = 'sender-info';
        infoDiv.innerText = `${senderName} - ${moment().format('Do MMMM, YYYY h:mm a')}`;

        let colDiv = document.createElement('div');
        colDiv.className = `col-10 card chat-card msg ${msgBg}`;
        colDiv.innerHTML = xssFilters.inHTMLData(data.msg).autoLink({ target: "_blank", rel: "nofollow" });

        let rowDiv = document.createElement('div');
        rowDiv.className = `row ${contentAlign} mb-2`;


        colDiv.appendChild(infoDiv);
        rowDiv.appendChild(colDiv);

        chatMsgDiv.appendChild(rowDiv);

        /**
         * Move focus to the newly added message but only if:
         * 1. Page has focus
         * 2. User has not moved scrollbar upward. This is to prevent moving the scroll position if user is reading previous messages.
         */
        if (this.pageHasFocus) {
            rowDiv.scrollIntoView();
        }
    }


    function toggleChatNotificationBadge() {
        if (document.querySelector('#chat-pane').classList.contains('chat-opened')) {
            document.querySelector('#new-chat-notification').setAttribute('hidden', true);
        }

        else {
            document.querySelector('#new-chat-notification').removeAttribute('hidden');
        }
    }



    function replaceTrack(stream, recipientPeer) {
        let sender = recipientPeer.getSenders ? recipientPeer.getSenders().find(s => s.track && s.track.kind === stream.kind) : false;

        sender ? sender.replaceTrack(stream) : '';
    }



    function toggleShareIcons(share) {
        let shareIconElem = document.querySelector('#share-screen');

        if (share) {
            shareIconElem.setAttribute('title', 'Stop sharing screen');
            shareIconElem.children[0].classList.add('text-primary');
            shareIconElem.children[0].classList.remove('text-white');
        }

        else {
            shareIconElem.setAttribute('title', 'Share screen');
            shareIconElem.children[0].classList.add('text-white');
            shareIconElem.children[0].classList.remove('text-primary');
        }
    }

    function toggleVideoBtnDisabled(disabled) {
        document.getElementById('toggle-video').disabled = disabled;
    }


    function maximiseStream(e) {
        let elem = e.target.parentElement.previousElementSibling;

        elem.requestFullscreen() || elem.mozRequestFullScreen() || elem.webkitRequestFullscreen() || elem.msRequestFullscreen();
    }


    function singleStreamToggleMute(e) {
        if (e.target.classList.contains('fa-microphone')) {
            e.target.parentElement.previousElementSibling.muted = true;
            e.target.classList.add('fa-microphone-slash');
            e.target.classList.remove('fa-microphone');
        }

        else {
            e.target.parentElement.previousElementSibling.muted = false;
            e.target.classList.add('fa-microphone');
            e.target.classList.remove('fa-microphone-slash');
        }
    }


    function saveRecordedStream(stream, user) {
        let blob = new Blob(stream, { type: 'video/webm' });

        let file = new File([blob], `${user}-${moment().unix()}-record.webm`);

        saveAs(file);
    }


    function toggleModal(id, show) {
        let el = document.getElementById(id);

        if (show) {
            el.style.display = 'block';
            el.removeAttribute('aria-hidden');
        }

        else {
            el.style.display = 'none';
            el.setAttribute('aria-hidden', true);
        }
    }



    function setLocalStream(stream, mirrorMode = true) {
        const localVidElem = document.getElementById('local');

        localVidElem.srcObject = stream;
        mirrorMode ? localVidElem.classList.add('mirror-mode') : localVidElem.classList.remove('mirror-mode');
    }


    function adjustVideoElemSize() {
        let elem = document.getElementsByClassName('card');
        let totalRemoteVideosDesktop = elem.length;
        let newWidth = totalRemoteVideosDesktop <= 1 ? '100%' : (
            totalRemoteVideosDesktop == 2 ? '50%' : (
                totalRemoteVideosDesktop == 3 ? '33.33%' : (
                    totalRemoteVideosDesktop <= 8 ? '25%' : (
                        totalRemoteVideosDesktop <= 15 ? '20%' : (
                            totalRemoteVideosDesktop <= 18 ? '16%' : (
                                totalRemoteVideosDesktop <= 23 ? '15%' : (
                                    totalRemoteVideosDesktop <= 32 ? '12%' : '10%'
                                )
                            )
                        )
                    )
                )
            )
        );


        for (let i = 0; i < totalRemoteVideosDesktop; i++) {
            elem[i].style.width = newWidth;
        }
    }

    function createDemoRemotes(str, total = 6) {
        let i = 0;

        let testInterval = setInterval(() => {
            let newVid = document.createElement('video');
            newVid.id = `demo-${i}-video`;
            newVid.srcObject = str;
            newVid.autoplay = true;
            newVid.className = 'remote-video';

            //video controls elements
            let controlDiv = document.createElement('div');
            controlDiv.className = 'remote-video-controls';
            controlDiv.innerHTML = `<i class="fa fa-microphone text-white pr-3 mute-remote-mic" title="Mute"></i>
                <i class="fa fa-expand text-white expand-remote-video" title="Expand"></i>`;

            //create a new div for card
            let cardDiv = document.createElement('div');
            cardDiv.className = 'card card-sm';
            cardDiv.id = `demo-${i}`;
            cardDiv.appendChild(newVid);
            cardDiv.appendChild(controlDiv);

            //put div in main-section elem
            document.getElementById('videos').appendChild(cardDiv);

            this.adjustVideoElemSize();

            i++;

            if (i == total) {
                clearInterval(testInterval);
            }
        }, 2000);
    }
</script>
{{!-- RTC.js --}}
<script>
    window.addEventListener('load', () => {
        const room = getQString(location.href, 'room');
        const username = sessionStorage.getItem('username');

        if (!room) {
            document.querySelector('#room-create').attributes.removeNamedItem('hidden');
        }

        else if (!username) {
            document.querySelector('#username-set').attributes.removeNamedItem('hidden');
        }

        else {
            let commElem = document.getElementsByClassName('room-comm');

            for (let i = 0; i < commElem.length; i++) {
                commElem[i].attributes.removeNamedItem('hidden');
            }

            var pc = [];

            let socket = io('/stream');

            var socketId = '';
            var randomNumber = `__${generateRandomString()}__${generateRandomString()}__`;
            var myStream = '';
            var screen = '';
            var recordedStream = [];
            var mediaRecorder = '';

            //Get user video by default
            getAndSetUserStream();


            socket.on('connect', () => {
                //set socketId
                socketId = socket.io.engine.id;
                document.getElementById('randomNumber').innerText = randomNumber;


                socket.emit('subscribe', {
                    room: room,
                    socketId: socketId
                });


                socket.on('new user', (data) => {
                    socket.emit('newUserStart', { to: data.socketId, sender: socketId });
                    pc.push(data.socketId);
                    init(true, data.socketId);
                });


                socket.on('newUserStart', (data) => {
                    pc.push(data.sender);
                    init(false, data.sender);
                });


                socket.on('ice candidates', async (data) => {
                    data.candidate ? await pc[data.sender].addIceCandidate(new RTCIceCandidate(data.candidate)) : '';
                });


                socket.on('sdp', async (data) => {
                    if (data.description.type === 'offer') {
                        data.description ? await pc[data.sender].setRemoteDescription(new RTCSessionDescription(data.description)) : '';

                        getUserFullMedia().then(async (stream) => {
                            if (!document.getElementById('local').srcObject) {
                                setLocalStream(stream);
                            }

                            //save my stream
                            myStream = stream;

                            stream.getTracks().forEach((track) => {
                                pc[data.sender].addTrack(track, stream);
                            });

                            let answer = await pc[data.sender].createAnswer();

                            await pc[data.sender].setLocalDescription(answer);

                            socket.emit('sdp', { description: pc[data.sender].localDescription, to: data.sender, sender: socketId });
                        }).catch((e) => {
                            console.error(e);
                        });
                    }

                    else if (data.description.type === 'answer') {
                        await pc[data.sender].setRemoteDescription(new RTCSessionDescription(data.description));
                    }
                });


                socket.on('chat', (data) => {
                    addChat(data, 'remote');
                });
            });


            function getAndSetUserStream() {
                getUserFullMedia().then((stream) => {
                    //save my stream
                    myStream = stream;

                    setLocalStream(stream);
                }).catch((e) => {
                    console.error(`stream error: ${e}`);
                });
            }


            function sendMsg(msg) {
                let data = {
                    room: room,
                    msg: msg,
                    sender: `${username} (${randomNumber})`
                };

                //emit chat message
                socket.emit('chat', data);

                //add localchat
                addChat(data, 'local');
            }



            function init(createOffer, partnerName) {
                pc[partnerName] = new RTCPeerConnection(getIceServer());

                if (screen && screen.getTracks().length) {
                    screen.getTracks().forEach((track) => {
                        pc[partnerName].addTrack(track, screen);//should trigger negotiationneeded event
                    });
                }

                else if (myStream) {
                    myStream.getTracks().forEach((track) => {
                        pc[partnerName].addTrack(track, myStream);//should trigger negotiationneeded event
                    });
                }

                else {
                    getUserFullMedia().then((stream) => {
                        //save my stream
                        myStream = stream;

                        stream.getTracks().forEach((track) => {
                            pc[partnerName].addTrack(track, stream);//should trigger negotiationneeded event
                        });

                        setLocalStream(stream);
                    }).catch((e) => {
                        console.error(`stream error: ${e}`);
                    });
                }



                //create offer
                if (createOffer) {
                    pc[partnerName].onnegotiationneeded = async () => {
                        let offer = await pc[partnerName].createOffer();

                        await pc[partnerName].setLocalDescription(offer);

                        socket.emit('sdp', { description: pc[partnerName].localDescription, to: partnerName, sender: socketId });
                    };
                }



                //send ice candidate to partnerNames
                pc[partnerName].onicecandidate = ({ candidate }) => {
                    socket.emit('ice candidates', { candidate: candidate, to: partnerName, sender: socketId });
                };



                //add
                pc[partnerName].ontrack = (e) => {
                    let str = e.streams[0];
                    if (document.getElementById(`${partnerName}-video`)) {
                        document.getElementById(`${partnerName}-video`).srcObject = str;
                    }

                    else {
                        //video elem
                        let newVid = document.createElement('video');
                        newVid.id = `${partnerName}-video`;
                        newVid.srcObject = str;
                        newVid.autoplay = true;
                        newVid.className = 'remote-video bg-dark';

                        //video controls elements
                        let controlDiv = document.createElement('div');
                        controlDiv.className = 'remote-video-controls';
                        controlDiv.innerHTML = `<i class="fa fa-microphone text-white pr-3 mute-remote-mic" title="Mute"></i>
                    <i class="fa fa-expand text-white expand-remote-video" title="Expand"></i>`;

                        //create a new div for card
                        let cardDiv = document.createElement('div');
                        cardDiv.className = 'card card-sm';
                        cardDiv.id = partnerName;
                        cardDiv.appendChild(newVid);
                        cardDiv.appendChild(controlDiv);

                        //put div in main-section elem
                        document.getElementById('videos').appendChild(cardDiv);

                        adjustVideoElemSize();
                    }
                };



                pc[partnerName].onconnectionstatechange = (d) => {
                    switch (pc[partnerName].iceConnectionState) {
                        case 'disconnected':
                        case 'failed':
                            closeVideo(partnerName);
                            break;

                        case 'closed':
                            closeVideo(partnerName);
                            break;
                    }
                };



                pc[partnerName].onsignalingstatechange = (d) => {
                    switch (pc[partnerName].signalingState) {
                        case 'closed':
                            console.log("Signalling state is 'closed'");
                            closeVideo(partnerName);
                            break;
                    }
                };
            }



            function shareScreen() {
                handleShareScreen().then((stream) => {
                    toggleShareIcons(true);

                    //disable the video toggle btns while sharing screen. This is to ensure clicking on the btn does not interfere with the screen sharing
                    //It will be enabled was user stopped sharing screen
                    toggleVideoBtnDisabled(true);

                    //save my screen stream
                    screen = stream;

                    //share the new stream with all partners
                    broadcastNewTracks(stream, 'video', false);

                    //When the stop sharing button shown by the browser is clicked
                    screen.getVideoTracks()[0].addEventListener('ended', () => {
                        stopSharingScreen();
                    });
                }).catch((e) => {
                    console.error(e);
                });
            }



            function stopSharingScreen() {
                //enable video toggle btn
                toggleVideoBtnDisabled(false);

                return new Promise((res, rej) => {
                    screen.getTracks().length ? screen.getTracks().forEach(track => track.stop()) : '';

                    res();
                }).then(() => {
                    toggleShareIcons(false);
                    broadcastNewTracks(myStream, 'video');
                }).catch((e) => {
                    console.error(e);
                });
            }



            function broadcastNewTracks(stream, type, mirrorMode = true) {
                setLocalStream(stream, mirrorMode);

                let track = type == 'audio' ? stream.getAudioTracks()[0] : stream.getVideoTracks()[0];

                for (let p in pc) {
                    let pName = pc[p];

                    if (typeof pc[pName] == 'object') {
                        replaceTrack(track, pc[pName]);
                    }
                }
            }


            function toggleRecordingIcons(isRecording) {
                let e = document.getElementById('record');

                if (isRecording) {
                    e.setAttribute('title', 'Stop recording');
                    e.children[0].classList.add('text-danger');
                    e.children[0].classList.remove('text-white');
                }

                else {
                    e.setAttribute('title', 'Record');
                    e.children[0].classList.add('text-white');
                    e.children[0].classList.remove('text-danger');
                }
            }


            function startRecording(stream) {
                mediaRecorder = new MediaRecorder(stream, {
                    mimeType: 'video/webm;codecs=vp9'
                });

                mediaRecorder.start(1000);
                toggleRecordingIcons(true);

                mediaRecorder.ondataavailable = function (e) {
                    recordedStream.push(e.data);
                };

                mediaRecorder.onstop = function () {
                    toggleRecordingIcons(false);

                    saveRecordedStream(recordedStream, username);

                    setTimeout(() => {
                        recordedStream = [];
                    }, 3000);
                };

                mediaRecorder.onerror = function (e) {
                    console.error(e);
                };
            }


            //Chat textarea
            document.getElementById('chat-input').addEventListener('keypress', (e) => {
                if (e.which === 13 && (e.target.value.trim())) {
                    e.preventDefault();

                    sendMsg(e.target.value);

                    setTimeout(() => {
                        e.target.value = '';
                    }, 50);
                }
            });


            //When the video icon is clicked
            document.getElementById('toggle-video').addEventListener('click', (e) => {
                e.preventDefault();

                let elem = document.getElementById('toggle-video');

                if (myStream.getVideoTracks()[0].enabled) {
                    e.target.classList.remove('fa-video');
                    e.target.classList.add('fa-video-slash');
                    elem.setAttribute('title', 'Show Video');

                    myStream.getVideoTracks()[0].enabled = false;
                }

                else {
                    e.target.classList.remove('fa-video-slash');
                    e.target.classList.add('fa-video');
                    elem.setAttribute('title', 'Hide Video');

                    myStream.getVideoTracks()[0].enabled = true;
                }

                broadcastNewTracks(myStream, 'video');
            });


            //When the mute icon is clicked
            document.getElementById('toggle-mute').addEventListener('click', (e) => {
                e.preventDefault();

                let elem = document.getElementById('toggle-mute');

                if (myStream.getAudioTracks()[0].enabled) {
                    e.target.classList.remove('fa-microphone-alt');
                    e.target.classList.add('fa-microphone-alt-slash');
                    elem.setAttribute('title', 'Unmute');

                    myStream.getAudioTracks()[0].enabled = false;
                }

                else {
                    e.target.classList.remove('fa-microphone-alt-slash');
                    e.target.classList.add('fa-microphone-alt');
                    elem.setAttribute('title', 'Mute');

                    myStream.getAudioTracks()[0].enabled = true;
                }

                broadcastNewTracks(myStream, 'audio');
            });


            //When user clicks the 'Share screen' button
            document.getElementById('share-screen').addEventListener('click', (e) => {
                e.preventDefault();

                if (screen && screen.getVideoTracks().length && screen.getVideoTracks()[0].readyState != 'ended') {
                    stopSharingScreen();
                }

                else {
                    shareScreen();
                }
            });


            //When record button is clicked
            document.getElementById('record').addEventListener('click', (e) => {
                /**
                 * Ask user what they want to record.
                 * Get the stream based on selection and start recording
                 */
                if (!mediaRecorder || mediaRecorder.state == 'inactive') {
                    toggleModal('recording-options-modal', true);
                }

                else if (mediaRecorder.state == 'paused') {
                    mediaRecorder.resume();
                }

                else if (mediaRecorder.state == 'recording') {
                    mediaRecorder.stop();
                }
            });


            //When user choose to record screen
            document.getElementById('record-screen').addEventListener('click', () => {
                toggleModal('recording-options-modal', false);

                if (screen && screen.getVideoTracks().length) {
                    startRecording(screen);
                }

                else {
                    handleShareScreen().then((screenStream) => {
                        startRecording(screenStream);
                    }).catch(() => { });
                }
            });


            //When user choose to record own video
            document.getElementById('record-video').addEventListener('click', () => {
                toggleModal('recording-options-modal', false);

                if (myStream && myStream.getTracks().length) {
                    startRecording(myStream);
                }

                else {
                    getUserFullMedia().then((videoStream) => {
                        startRecording(videoStream);
                    }).catch(() => { });
                }
            });
        }
    });

</script>
{{!-- events.js --}}
<script>
    window.addEventListener('load', () => {
        //When the chat icon is clicked
        document.querySelector('#toggle-chat-pane').addEventListener('click', (e) => {
            let chatElem = document.querySelector('#chat-pane');
            let mainSecElem = document.querySelector('#main-section');

            if (chatElem.classList.contains('chat-opened')) {
                chatElem.setAttribute('hidden', false);
                mainSecElem.classList.remove('col-md-9');
                mainSecElem.classList.add('col-md-12');
                chatElem.classList.remove('chat-opened');
            }

            else {
                chatElem.attributes.removeNamedItem('hidden');
                mainSecElem.classList.remove('col-md-12');
                mainSecElem.classList.add('col-md-9');
                chatElem.classList.add('chat-opened');
            }

            //xóa huy hiệu 'Mới' trên biểu tượng trò chuyện (nếu có) sau khi trò chuyện được mở.
            setTimeout(() => {
                if (document.querySelector('#chat-pane').classList.contains('chat-opened')) {
                    toggleChatNotificationBadge();
                }
            }, 300);
        });


        //Khi khung video được nhấp vào. Điều này sẽ cho phép chế độ ảnh trong ảnh
        document.getElementById('local').addEventListener('click', () => {
            if (!document.pictureInPictureElement) {
                document.getElementById('local').requestPictureInPicture()
                    .catch(error => {
                        // Video failed to enter Picture-in-Picture mode.
                        console.error(error);
                    });
            }

            else {
                document.exitPictureInPicture()
                    .catch(error => {
                        // Video failed to leave Picture-in-Picture mode.
                        console.error(error);
                    });
            }
        });


        //When the 'Create room" is button is clicked
        document.getElementById('create-room').addEventListener('click', (e) => {
            e.preventDefault();

            let roomName = document.querySelector('#room-name').value;
            let yourName = document.querySelector('#your-name').value;

            if (roomName && yourName) {
                //remove error message, if any
                document.querySelector('#err-msg').innerText = "";

                //save the user's name in sessionStorage
                sessionStorage.setItem('username', yourName);

                //create room link
                let roomLink = `${location.origin}/new-call-video/${generateRandomString()}`;

                //show message with link to room
                document.querySelector('#room-created').innerHTML = `Room successfully created. Click <a href='${roomLink}'>here</a> to enter room. 
                Share the room link with your partners.`;

                //empty the values
                document.querySelector('#room-name').value = '';
                document.querySelector('#your-name').value = '';
            }

            else {
                document.querySelector('#err-msg').innerText = "All fields are required";
            }
        });


        //When the 'Enter room' button is clicked.
        document.getElementById('enter-room').addEventListener('click', (e) => {
            e.preventDefault();

            let name = document.querySelector('#username').value;

            if (name) {
                //remove error message, if any
                document.querySelector('#err-msg-username').innerText = "";

                //save the user's name in sessionStorage
                sessionStorage.setItem('username', name);

                //reload room
                location.reload();
            }

            else {
                document.querySelector('#err-msg-username').innerText = "Please input your name";
            }
        });


        document.addEventListener('click', (e) => {
            if (e.target && e.target.classList.contains('expand-remote-video')) {
                maximiseStream(e);
            }

            else if (e.target && e.target.classList.contains('mute-remote-mic')) {
                singleStreamToggleMute(e);
            }
        });


        document.getElementById('closeModal').addEventListener('click', () => {
            toggleModal('recording-options-modal', false);
        });
    });
</script>
{{!-- autoLink.js --}}
<script>
    (function () {
        var autoLink,
            slice = [].slice;

        autoLink = function () {
            var callback, k, linkAttributes, option, options, pattern, v;
            options = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            pattern = /(^|[\s\n]|<[A-Za-z]*\/?>)((?:https?|ftp):\/\/[\-A-Z0-9+\u0026\u2019@#\/%?=()~_|!:,.;]*[\-A-Z0-9+\u0026@#\/%=~()_|])/gi;
            if (!(options.length > 0)) {
                return this.replace(pattern, "$1<a href='$2'>$2</a>");
            }
            option = options[0];
            callback = option["callback"];
            linkAttributes = ((function () {
                var results;
                results = [];
                for (k in option) {
                    v = option[k];
                    if (k !== 'callback') {
                        results.push(" " + k + "='" + v + "'");
                    }
                }
                return results;
            })()).join('');
            return this.replace(pattern, function (match, space, url) {
                var link;
                link = (typeof callback === "function" ? callback(url) : void 0) || ("<a href='" + url + "'" + linkAttributes + ">" + url + "</a>");
                return "" + space + link;
            });
        };

        String.prototype['autoLink'] = autoLink;

    }).call(this);
</script>